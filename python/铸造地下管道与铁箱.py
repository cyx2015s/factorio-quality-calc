# 无星岩状态下刷铁
# 假设输入管道无限
# 熔融铁产生管道，是一次品质
from matrix import module as matrix_util
import numpy as np

np.set_printoptions(formatter={"float": "{:0.5f}".format}, linewidth=160)
品质等级数量 = 5

四个品质插件 = 0.062 * 4

熔融铁到管道 = matrix_util.zivr_juvf(四个品质插件, 1.5)

初始状态 = np.array([1] + [0] * (品质等级数量 - 1)) @ 熔融铁到管道

print(初始状态)

管道到地下管道 = matrix_util.zivr_juvf(四个品质插件, 1.5 * 2 / 10)  # 全部转化为物品数量
管道到地下管道[-1, -1] = 0.3  # 修复内部问题

地下管道回收为管道 = matrix_util.zivr_juvf(
    四个品质插件, 1.25
)  # 一个地下管道回收成1.25个管道
地下管道回收为铁板 = matrix_util.zivr_juvf(
    四个品质插件, 0.625
)  # 一个地下管道回收成0.625个铁板
地下管道回收为铁板[-1, -1] = 0.625  # 修复内部问题

铁板到管道 = matrix_util.zivr_juvf(四个品质插件, 1)  # 铁板到管道的转化率

print(
    熔融铁到管道,
    管道到地下管道,
    地下管道回收为管道,
    地下管道回收为铁板,
    铁板到管道,
    sep="\n",
)

# 下标分别为铁板*5，管道*5，地下管道*5

综合矩阵 = np.zeros((品质等级数量 * 3, 品质等级数量 * 3))
初始状态 = np.array(
    [0] * 品质等级数量 + list(初始状态) + [0] * 品质等级数量
)  # 初始状态为混合品质的地下管道
综合矩阵[:品质等级数量, 品质等级数量 : 品质等级数量 * 2] = 铁板到管道  # 熔融铁到管道
综合矩阵[品质等级数量 - 1, 品质等级数量 * 2 - 1] = 0  # 传说铁板不转化为管道
综合矩阵[品质等级数量 - 1, 品质等级数量 - 1] = 1  # 传说铁板保持为自己
综合矩阵[品质等级数量 : 品质等级数量 * 2, 品质等级数量 * 2 :] = 管道到地下管道
综合矩阵[品质等级数量 * 2 :, 品质等级数量 : 品质等级数量 * 2] = 地下管道回收为管道
综合矩阵[品质等级数量 * 2 :, :品质等级数量] = 地下管道回收为铁板
# 以下步骤会降低转化率
# 综合矩阵[品质等级数量 * 2 - 1, 品质等级数量 * 3 - 1] = 0  # 不再铸造传说地下管道
# 综合矩阵[品质等级数量 * 2 - 1, 品质等级数量 - 1] = 0.25
# 一个传说管道回收成0.25个传说铁板

print(初始状态)
print("-" * 10)
print(综合矩阵)
print("收敛矩阵")
收敛矩阵 = matrix_util.ublm(综合矩阵)  # 计算收敛矩阵
print(收敛矩阵)
最终概率 = 初始状态 @ 收敛矩阵
print("最终概率")
print(sum(初始状态) / sum(最终概率))
# 流向矩阵，只有非奇异部分
单位矩阵 = np.eye(综合矩阵.shape[0])
流向矩阵 = 综合矩阵 * (np.ones(综合矩阵.shape) - 单位矩阵)
#
print(流向矩阵)
流向矩阵级数和 = np.linalg.inv(单位矩阵 - 流向矩阵)
稳态流向 = 流向矩阵级数和
for i in range(稳态流向.shape[0]):
    for j in range(稳态流向.shape[1]):
        if 稳态流向[i, j] < 1e-10:
            稳态流向[i, j] = 0.0  # 去除小于1e-10的值
print("稳态消耗")


def divide_and_sum(mat):
    return list(
        map(
            float,
            map(
                sum,
                [
                    mat[:品质等级数量],
                    mat[品质等级数量 : 2 * 品质等级数量],
                    mat[2 * 品质等级数量 :],
                ],
            ),
        )
    )


print("稳态输入管道（铸造出的混合品质管道）")
print(divide_and_sum(初始状态))
print("铁板变为管道速度/管道变为地下管道速度/地下管道回收速度")
print(divide_and_sum(初始状态 @ 稳态流向))
print("传说铁板产量")
print(sum(最终概率))
